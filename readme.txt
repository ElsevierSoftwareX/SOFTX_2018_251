This ART data analyzer package is a python package that analyze the physical quantities change between two atomic configurations of each possible event search of using ART. The goal is to correlate the change in atomic structure with the change of activation energy. 

Currently, it can output the information such as displacement, atomic strain (e.g. the volumetric and shear strain) as a statistical distribution for both each event. It also implement the physically meaningful atomic structure descriptor SOAP matrix for a complete representation of atomic structure within a local environment.

This package has the following modules and sub-packages:

/src contains all the source code of various libraries, majorly in python, it may also contains other code such as Matlab or C code

data_reader: extracting data from various data file formats (default format lammps dump file), read data into a pandas.Dataframe

event_selector: locate the accepted event to be analyzed while preventing redundant event search

Util: utilities containing various classes and functions for other modules

calculator package:
	strain_calculator: calculate the atomic strain for a specific event

	stress_calculator, voronoi analysis coming soon

visualator package:
	strain_visualator: visualize the atomic strain from stored atomic strain results 	in results.pkl file


/examples: contains examples of executable running scripts and demo data. The demo example system is CuZr metallic glass.

/scripts: contains executable scripts that will be directly invoked on the command line

/tests: contains unittests to test various modules



Operating system:
This python package depends on some python packages such as numpy, pandas, matplotlib, python-tk,scipy, mpl_toolkits, scikit-learn. install easy_install, pip by sudo apt-get install python-pip python-dev build-essential, install previous mentioned python package by python -m pip install --user numpy scipy matplotlib jupyter pandas sympy nose. Mac O.S mpl_toolkits under matplotlib library may not be a package and need user to manually make it a package to import. User need to verify the successful installation of these dependencies in their OS. The package has been tested on python 2.7. Python 3 user may need further tests

How to install/use this python package:
This package is written in python scripting language to analyze the atomic configuration data generated by ART atomistic simulation software. There is no need to compile and build python code. This package can be put in any directory. Ensure to source the environment.sh before using this package. The purpose is to create the necessary environmental variables PYTHONPATH/PATH/TEST_PROJ for current bash sessions to find the python packages/exe scripts/test directory. The user need to change these environmental variables to point to their correct ART_data_analyzer package and the dir to ART data on their machine

Executable files:

Currently, strain_calc.py is an exe python file, it performs displacement and atomic strain calculations and save all results and plots automatically in their corresponding locations. The calculation results have been rigorously verified with the results by Ovito.

Before running this script, after user specify all the environmental variables in environmental.sh to match their own machine and source it. 

Nice features: 
support parallel calculation by multiprocessing module, the user can specify the number of processes in the input file

all calculations in the fly of strain calculations will be saved into a pkl file, such as nn_results.pkl, strain_results.pkl, and displacement_results.pkl for initial to saddle configuration, and saddle to final configuration for each event. When rerunning this calculation, these files will be directly read to prevent redundant running. 

A re_calc argument is included with default False to use the existing calculations. However, when user want to try calculate with a new set of input parameters, they may need to invoke the re_calc to True.

All plots for visualizing the statistics of various physical quantities are automatically plotted and saved into their corresponding event locations that are specified by event_initial_str_sad_str_fin_str: for example, event_min1001_sad1002_min1002

These plots are automatically updated without redoing the calculation so that user can modify the plotting function to customize their own plot styles

The mean, std, max of displacement, shear strain, volumetric strain of each event are plotted into a histogram for all events, these plots are also automatically updated.

All events are accepted/selected based on their individual modules and have minimal interaction with the calculation modules. User can customize their own event selection criteria.

The user can specify the cut-off distance cut-off, the simulation box dimension box_dim and the total number of tests, num_of_procs in their data directory
{'cut_off':cut_off_distance,'box_dim':box_dim,'num_of_tests':num_of_tests,’num_of_procs’:num_of_procs}

If the num_of_procs == 1, it will run calculation in single process mode

If num_of_procs >1, it will invoke the multiprocessing module Pool class
num_of_procs can be found by nproc --all or grep -c processor /proc/cpuinfo in linux

In Mac, sysctl -n hw.ncpu to get logical CPUs

Crossplatform option here, default is to use all CPU cores by multiprocess.cpu_count() as implemented as default option here.

An example of cut_off_distance dict: {(1,1):3.7,(1,2):3.7,(2,2):3.7}
Means atom_type_1 and atom_type 1 cut_off_distance is 3.7, type 1 and type 2 is also 3.7 etc

Box_dim only support orthogonal currently, more to be implemented in the future

User need to input the number of tests in their data directory


This input for running the data calculation will be saved into os.environ['TEST_DIR']
as a pickle file for future reference if needed


In the future,
art_data: exe script
prompt the options that can use for various analyzing feature of the python package
Use sys.argparser to parse the user input from terminal
-calc/-c invoke the art_data_calculator exe 
-v invoke the art_data_visualization exe
-m invoke the correlation model exe by adopting the various data models implemented in scikit-learn machine learning package


 



